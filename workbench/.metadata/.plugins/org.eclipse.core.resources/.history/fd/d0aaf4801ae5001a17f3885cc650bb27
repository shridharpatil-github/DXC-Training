package com.dxc.test.controller;


import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.dxc.cricketmatch.controller.CricketMatchController;
import com.dxc.cricketmatch.exception.MatchNotAddedException;
import com.dxc.cricketmatch.exception.MatchNotFoundException;
import com.dxc.cricketmatch.model.NewMatch;
import com.dxc.cricketmatch.service.CricketMatchService;
import com.fasterxml.jackson.databind.ObjectMapper;


//@SpringBootApplication
/**
 * @author lenovo
 *
 */
//@DataMongoTest

//@ComponentScan({"com.dxc.cricketmatch.*"})
//@EntityScan("com.dxc.cricketmatch.*")
//@EnableMongoRepositories("com.dxc.cricketmatch.*")
//@AutoConfigureMockMvc

/*
 * The following annotation @WebMvcTest is to fire up an application context ( IOC )
 * that contains only the beans needed for testing a web controller
 * 
 */

@RunWith(SpringRunner.class)
@WebMvcTest
public class CricketMatchControllerTest {

	/* the below is the main entry point for server-side Spring MVC test support  */
	@Autowired
	private MockMvc mockMvc;
	private NewMatch newMatch;
	@MockBean
	private CricketMatchService cricketMatchService;
	
	
	/* Mockito's @injectMocks annotations allow us to inject mocked dependencies  */
	@InjectMocks
	
	private CricketMatchController cricketMatchController;
	
	private List<NewMatch> newMatchesList=null;

	/**
	 * @throws Exception
	 */
	@Before
	public void setUp() throws Exception
	{
		
		/*We can initiialize mock by calling initMocks method of
		  org.mockito.MockitoAnnotations
		  */
		
		MockitoAnnotations.initMocks(this);
		mockMvc=MockMvcBuilders.standaloneSetup(cricketMatchController).build();

//		 Date today = new Date();
//		 List<String> email = new ArrayList<String>();
//		 email.add("jon@dxc.com");
		newMatch=new NewMatch();
		newMatch.setMatchId(11111);
		newMatch.setTeam1("England");
		newMatch.setTeam2("NZ");
		newMatch.setDate(new Date());
		newMatch.setMatchStarted(true);
		newMatch.setToss_winner_team("England");
		newMatch.setType("Test");
		newMatch.setWinner_team("England");
		newMatch.setEmail(email);
		
		newMatchesList=new ArrayList<>();
		newMatchesList.add(newMatch);
		
	}


	/**
	 * @throws Exception
	 */
	@Test
	public void addToRecommendSuccess() throws Exception{
	
		when(cricketMatchService.addToRecommended(any())).thenReturn(newMatch.getTeam1()!=null);
		mockMvc.perform(MockMvcRequestBuilders.post("cricketmatch/api/recommendedMatch")
		.contentType(MediaType.APPLICATION_JSON).content(asJsonString(newMatch)))
		.andExpect(MockMvcResultMatchers.status().isCreated())
		.andDo(MockMvcResultHandlers.print());
	}
	
	/**
	 * @throws Exception
	 */
	@Test
	public void addToRecommendFailure() throws Exception{
	
		when(cricketMatchService.addToRecommended(any())).thenThrow(MatchNotAddedException.class);
		mockMvc.perform(MockMvcRequestBuilders.post("cricketmatch/api/recommendedMatch")
		.contentType(MediaType.APPLICATION_JSON).content(asJsonString(newMatch)))
		.andExpect(MockMvcResultMatchers.status().isConflict())
		.andDo(MockMvcResultHandlers.print());
	}

	 /**
	 * @throws Exception
	 */
	@Test
	    public void getAllRecommendedMatches() throws Exception {
	        when(cricketMatchService.getAllRecommendedNewMatches()).thenReturn(newMatchesList);
	        mockMvc.perform(MockMvcRequestBuilders.get("cricketmatch/api/getAllRecommeded")
	                .contentType(MediaType.APPLICATION_JSON))
	                .andExpect(MockMvcResultMatchers.status().isOk())
	                .andDo(MockMvcResultHandlers.print());
	    }

	  /**
	 * @throws Exception
	 */
	@Test
	    public void unrecommendMatchSuccess() throws Exception {

	        when(cricketMatchService.unrecommendMatch(11111,"jon@dxc.com")).thenReturn(true);
	        mockMvc.perform(MockMvcRequestBuilders.delete("cricketmatch/api/unrecommed/11111/jon@dxc.com")
	                .contentType(MediaType.APPLICATION_JSON)).andExpect(MockMvcResultMatchers.status().isOk())
	                .andDo(MockMvcResultHandlers.print());
	    }
	  
	  /**
	 * @throws Exception
	 */
	@Test
	    public void unrecommendMatchFailure() throws Exception {

	        when(cricketMatchService.unrecommendMatch(11111,"jon@dxc.com")).thenThrow(MatchNotFoundException.class);
	        mockMvc.perform(MockMvcRequestBuilders.delete("cricketmatch/api/unrecommed/11111/jon@dxc.com")
	                .contentType(MediaType.APPLICATION_JSON)).andExpect(MockMvcResultMatchers.status().isNotFound())
	                .andDo(MockMvcResultHandlers.print());
	    }


	 
	private String asJsonString(NewMatch newMatch) {
		// TODO Auto-generated method stub
		try {
			return new ObjectMapper().writeValueAsString(newMatch);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			throw new RuntimeException(e);
		}
	
	}

}
