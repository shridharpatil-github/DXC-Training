package com.dxc.cricketmatch.user.controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Optional;
import java.util.zip.Deflater;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.dxc.cricketmatch.user.exception.UserNotFoundException;
import com.dxc.cricketmatch.user.model.User;
import com.dxc.cricketmatch.user.repository.UserRepository;
import com.dxc.cricketmatch.user.response.UserResponse;
import com.dxc.cricketmatch.user.service.UserService;
import com.dxc.cricketmatch.user.tokengenerator.*;

import io.swagger.annotations.Api;

/**
 * @author lenovo
 *
 */

@RestController
@Api(value = "Authenticate user", description = "Add the user and authenticate user")
@RequestMapping("cricketmatch/user/api")
@CrossOrigin(origins = "http://localhost:4200")
public class UserController {

	@Autowired
	private UserService service;

	private HttpSession session;
	/**
	 * @param user
	 * @return response
	 */
	@PostMapping("/addUser")
	public UserResponse addUser(@RequestBody User user) {
		UserResponse response = new UserResponse();
			try {
		if(service.addUser(user)) {
				response.setHttpStatus(HttpStatus.OK);
				response.setMessage("Account Created");	
			}else {
				response.setHttpStatus(HttpStatus.BAD_REQUEST);
				response.setMessage("Email Already Registered!!");
			}
		}catch (UserNotFoundException e) {
			response.setHttpStatus(HttpStatus.BAD_REQUEST);
			response.setMessage("Email Already Registered!!");
		}
		return response;
	}

	/**
	 * @param email
	 * @param password 
	 * @param session
	 * @return ResponseEntity
	 */
	@GetMapping("/login/{email}/{password}")
	public UserResponse login(@PathVariable String email,@PathVariable String password ,HttpSession session)
	{
		UserResponse response = new UserResponse();
		User userFound;
		try {
			userFound = service.login(email,password);
			if(userFound!=null)
			{
				session.setAttribute("login_details", userFound.getEmail());
				this.session=session;
				TokenGenerator generator=new TokenGeneratorImpl();
				String token=generator.generateToken(userFound);
				response.setHttpStatus(HttpStatus.OK);
				response.setEmail(userFound.getEmail());
				response.setToken(token);
				response.setMessage("success");
			}else {
				response.setHttpStatus(HttpStatus.BAD_REQUEST);
				response.setMessage("Invalid Password");
			}
		} catch (UserNotFoundException e) {
			// TODO Auto-generated catch block
			response.setHttpStatus(HttpStatus.BAD_REQUEST);
			response.setMessage("Invalid UserId");
		}
		return response;
	}

	/**
	 * 
	 */
	@GetMapping("/logout")
	public void logout() {
		this.session.invalidate();
	}


	/**
	 * @param email
	 * @return UserResponse
	 */
	@GetMapping("/getUser/{email}")
	public UserResponse getUserDetails(@PathVariable String email) {
		User user;
		UserResponse response = new UserResponse();
		try {
			user = service.getUserDetails(email);
			response.setHttpStatus(HttpStatus.OK);
			response.setMessage("success");
			response.setUser(user);
		} catch (UserNotFoundException e) {
			response.setHttpStatus(HttpStatus.BAD_REQUEST);
			response.setMessage("failed");
		}

		return response;
	}

	/**
	 * @param user
	 * @param file
	 * @return UserResponse
	 */
	@PutMapping("/updateProfile")
	public UserResponse updateUserDetails(@RequestBody User user) {
		UserResponse response = new UserResponse();
		try {
			if(service.updateUserDetails(user)) {
				response.setHttpStatus(HttpStatus.OK);
				response.setMessage("success");
			}
		} catch (UserNotFoundException e) {
			response.setHttpStatus(HttpStatus.BAD_REQUEST);
			response.setMessage("failed");
		}
		return response;
	}
}
