package com.dxc.cricketmatch.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.dxc.cricketmatch.exception.MatchAlreadyExistException;
import com.dxc.cricketmatch.exception.MatchNotFoundException;
import com.dxc.cricketmatch.model.Faverites;
import com.dxc.cricketmatch.model.NewMatch;
import com.dxc.cricketmatch.response.CricketMatchResponse;
import com.dxc.cricketmatch.service.CricketMatchService;

import io.swagger.annotations.ApiOperation;

/**
 * @author Shreedharagowda
 * CricketMatchController is Controller class
 * will be implementing the following REST api:
 * POST to /recommededMatch passing NewMatch data create a NewMatch and return an CricketMatchResponse
 * GET to /getAllRecommeded fetching List of matches
 * DELETE to /unrecommed/{id} un recommend match(deleting match) by using match id
 */
@RestController
@RequestMapping("cricketmatch/api")
@CrossOrigin(origins = "http://localhost:4200")
public class CricketMatchController {

	@Autowired
	private CricketMatchService service;

	private final String success = "success";

	private final String failed = "failed";

	/**
	 * @param newMatch recommended match by user 
	 * @return response to user match is recommended or not 
	 */
	@ApiOperation(value = "Add the Match information as Recommended Match", response = CricketMatchResponse.class)
	@PostMapping("/recommededMatch")
	public CricketMatchResponse addToRecommended(@RequestBody NewMatch newMatch) {
		CricketMatchResponse response = new CricketMatchResponse();
		try {
			if(service.addToRecommended(newMatch)) {
				response.setHttpStatus(HttpStatus.OK);
				response.setMessage(success);
			}else {
				response.setHttpStatus(HttpStatus.BAD_REQUEST);
				response.setMessage(failed);
			}
		} catch (MatchAlreadyExistException e) {
			response.setHttpStatus(HttpStatus.BAD_REQUEST);
			response.setMessage("Match Already Recommended");
		}
		return response;
	}

	/**
	 * @return response {@link ResponseEntity} to user List of recommended matches
	 */
	@GetMapping("/getAllRecommeded")
	public CricketMatchResponse getAllRecommededMatches() {
		CricketMatchResponse response = new CricketMatchResponse();
		List<NewMatch> matches = service.getAllRecommendedNewMatches();
		if(matches != null) {
			response.setHttpStatus(HttpStatus.OK);
			response.setMessage(success);
			response.setNewMatches(matches);
		} else {
		response.setHttpStatus(HttpStatus.BAD_REQUEST);
		response.setMessage(failed);
		response.setNewMatches(null);
		}
		return response;
	}

	/**
	 * @param matchId delete the match by matchId 
	 * @param email 
	 * @return response {@link ResponseEntity}, success for match deleted
	 * failed for match not deleted
	 */
	@DeleteMapping("/unrecommed/{matchId}/{email}")
	public CricketMatchResponse unrecommendMatch(@PathVariable long matchId,@PathVariable String email) {
		CricketMatchResponse response = new CricketMatchResponse();
		try {
			if(service.unrecommendMatch(matchId,email)) {
				response.setHttpStatus(HttpStatus.OK);
				response.setMessage(success);
			} else {
				response.setHttpStatus(HttpStatus.BAD_REQUEST);
				response.setMessage(failed);
			}
		} catch (MatchNotFoundException e) {
			response.setHttpStatus(HttpStatus.BAD_REQUEST);
			response.setMessage("Match Not Found");
		}
		return response;
	}
	/**
	 * @param faverites
	 * @return String
	 */
	@GetMapping("/addFaverites")
	public String addFaverite(@RequestBody Faverites faverites) {
		
		if(service.addToFaverite(faverites)) {
			return "added to  faverite";
		}
			return "not added to faverites";
	}
}
