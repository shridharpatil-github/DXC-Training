https://www.tutorialspoint.com/software_testing/index.htm

Testing is the process of evaluating a system or its component(s) with the intent to find whether it satisfies the specified requirements or not.
Testing is executing a system in order to identify any gaps, errors, or missing requirements in contrary to the actual requirements.

Why to Learn Software Testing?
In the IT industry, large companies have a team with responsibilities to evaluate the developed software in context of the given requirements. Moreover, developers also conduct testing which is called Unit Testing. 

Different companies have different designations for people who test the software on the basis of their experience and knowledge such as Software Tester, Software Quality Assurance Engineer, QA Analyst, etc.

Applications of Software Testing
Cost Effective Development - Early testing saves both time and cost in many aspects, however reducing the cost without testing may result in improper design of a software application rendering the product useless.
Product Improvement - During the SDLC phases, testing is never a time-consuming process. However diagnosing and fixing the errors identified during proper testing is a time-consuming but productive activity.
Test Automation - Test Automation reduces the testing time, but it is not possible to start test automation at any time during software development. Test automaton should be started when the software has been manually tested and is stable to some extent. Moreover, test automation can never be used if requirements keep changing.
Quality Check - Software testing helps in determining following set of properties of any software such as 
Functionality
Reliability
Usability
Efficiency
Maintainability
Portability

JUNIT Testing
Junit is the java unit testing framework which used for testing of the individual units or components which are actually independent classes. The version in currently in use is Junit 4 which makes use of the Java 5 annotations and contains additional features compared to Junit 3.
-----------------------------------------------------------------------------------------------------------
https://www.geeksforgeeks.org/static-import-java/



In Java, static import concept is introduced in 1.5 version. With the help of static import, we can access the static members of a class directly without class name or any object. For Example: we always use sqrt() method of Math class by using Math class i.e. Math.sqrt(), but by using static import we can access sqrt() method directly.
According to SUN microSystem, it will improve the code readability and enhance coding. But according to the programming experts, it will lead to confusion and not good for programming. If there is no specific requirement then we should not go for static import.
filter_none 
edit 
play_arrow
brightness_4 
// Java Program to illustrate 
// calling of predefined methods 
// without static import 
class Geeks { 
    public static void main(String[] args) 
    { 
        System.out.println(Math.sqrt(4)); 
        System.out.println(Math.pow(2, 2)); 
        System.out.println(Math.abs(6.3)); 
    } 
} 



http://emma.sourceforge.net/


Until recently, the world of Java development had been plagued by an absurd discrepancy: Java developers had excellent free IDEs, free compilers, free test frameworks but had to rely on code coverage tools that charged an arm and a leg in license fees. As a Java pro, I would like to use the same free coverage tool regardless of whether it is a massive commercial project at work or a small fun project at home. I've created EMMA to be that tool.
EMMA is an open-source toolkit for measuring and reporting Java code coverage. EMMA distinguishes itself from other tools by going after a unique feature combination: support for large-scale enterprise software development while keeping individual developer's work fast and iterative. Every developer on your team can now get code coverage for free and they can get it fast!
Chances are, you've come here already knowing what coverage is all about and are, in fact, wondering what EMMA offers and why it is worth checking out. Explore the rest of this site to see why.

To get the plugin for Emma

Help----> Eclipse MarketPlace--->In Find text box type in  ( Emma ) ---> go

Install --> ( 10-15 mts)

It will ask to restart your STS so that the installation is reflected and
you get EMMA which is code coverage tool.







